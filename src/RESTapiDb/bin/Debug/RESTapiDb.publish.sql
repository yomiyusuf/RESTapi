/*
Deployment script for RESTapiDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "RESTapiDB"
:setvar DefaultFilePrefix "RESTapiDB"
:setvar DefaultDataPath "C:\Users\HP USER\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\v11.0"
:setvar DefaultLogPath "C:\Users\HP USER\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\v11.0"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[Status]...';


GO
CREATE TABLE [dbo].[Status] (
    [StatusId] BIGINT         IDENTITY (1, 1) NOT NULL,
    [Name]     NVARCHAR (100) NOT NULL,
    [Ordinal]  INT            NOT NULL,
    [ts]       ROWVERSION     NOT NULL,
    PRIMARY KEY CLUSTERED ([StatusId] ASC)
);


GO
PRINT N'Creating [dbo].[Task]...';


GO
CREATE TABLE [dbo].[Task] (
    [TaskId]        BIGINT         IDENTITY (1, 1) NOT NULL,
    [Subject]       NVARCHAR (100) NOT NULL,
    [StartDate]     DATETIME2 (7)  NULL,
    [DueDate]       DATETIME2 (7)  NULL,
    [CompletedDate] DATETIME2 (7)  NULL,
    [StatusId]      BIGINT         NOT NULL,
    [CreatedDate]   DATETIME2 (7)  NOT NULL,
    [CreatedUserId] BIGINT         NOT NULL,
    [ts]            ROWVERSION     NOT NULL,
    PRIMARY KEY CLUSTERED ([TaskId] ASC)
);


GO
PRINT N'Creating [dbo].[TaskUser]...';


GO
CREATE TABLE [dbo].[TaskUser] (
    [TaskId] BIGINT     NOT NULL,
    [UserId] BIGINT     NOT NULL,
    [ts]     ROWVERSION NOT NULL,
    PRIMARY KEY CLUSTERED ([TaskId] ASC, [UserId] ASC)
);


GO
PRINT N'Creating [dbo].[TaskUser].[ix_TaskUser_UserId]...';


GO
CREATE NONCLUSTERED INDEX [ix_TaskUser_UserId]
    ON [dbo].[TaskUser]([UserId] ASC);


GO
PRINT N'Creating [dbo].[User]...';


GO
CREATE TABLE [dbo].[User] (
    [UserId]    BIGINT        IDENTITY (1, 1) NOT NULL,
    [Firstname] NVARCHAR (50) NOT NULL,
    [Lastname]  NVARCHAR (50) NOT NULL,
    [Username]  NVARCHAR (50) NOT NULL,
    [ts]        ROWVERSION    NOT NULL,
    CONSTRAINT [PK_User] PRIMARY KEY CLUSTERED ([UserId] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[Task]...';


GO
ALTER TABLE [dbo].[Task] WITH NOCHECK
    ADD FOREIGN KEY ([StatusId]) REFERENCES [dbo].[Status] ([StatusId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Task]...';


GO
ALTER TABLE [dbo].[Task] WITH NOCHECK
    ADD FOREIGN KEY ([CreatedUserId]) REFERENCES [dbo].[User] ([UserId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[TaskUser]...';


GO
ALTER TABLE [dbo].[TaskUser] WITH NOCHECK
    ADD FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([UserId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[TaskUser]...';


GO
ALTER TABLE [dbo].[TaskUser] WITH NOCHECK
    ADD FOREIGN KEY ([TaskId]) REFERENCES [dbo].[Task] ([TaskId]);


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
if not exists(select * from dbo.Status where Name = 'Not Started')
insert into dbo.Status(Name, Ordinal) values('Not Started', 0);
if not exists(select * from dbo.Status where Name = 'In Progress')
insert into dbo.Status(Name, Ordinal) values('In Progress', 1);
if not exists(select * from dbo.Status where Name = 'Completed')
insert into dbo.Status(Name, Ordinal) values('Completed', 2);
declare @statusId int,
@taskId int,
@userId int

if not exists (select * from [User] where Username = 'bhogg')
	INSERT into [dbo].[User] ([Firstname], [Lastname], [Username])
		VALUES (N'Boss', N'Hogg', N'bhogg')

if not exists (select * from [User] where Username = 'jbob')
	INSERT into [dbo].[User] ([Firstname], [Lastname], [Username])
		VALUES (N'Jim', N'Bob', N'jbob')

if not exists (select * from [User] where Username = 'jdoe')
	INSERT into [dbo].[User] ([Firstname], [Lastname], [Username])
		VALUES (N'John', N'Doe', N'jdoe')

if not exists(select * from dbo.Task where Subject = 'Test Task')
begin
	select top 1 @statusId = StatusId from Status order by StatusId;
	select top 1 @userId = UserId from [User] order by UserId;
	insert into dbo.Task(Subject, StartDate, StatusId, CreatedDate, CreatedUserId)
	values('Test Task', getdate(), @statusId, getdate(), @userId);
	set @taskId = SCOPE_IDENTITY();
	INSERT [dbo].[TaskUser] ([TaskId], [UserId])
	VALUES (@taskId, @userId)
end
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.Task'), OBJECT_ID(N'dbo.TaskUser'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
